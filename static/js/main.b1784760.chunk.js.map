{"version":3,"sources":["withRoot.jsx","users.jsx","GoodDeeds.jsx","App.jsx","index.js"],"names":["theme","createMuiTheme","typography","useNextVariants","palette","primary","light","main","dark","contrastText","secondary","withRoot","Component","props","CssBaseline","users","sort","goodDeeds","Months","Checklist","items","classes","day","listItems","map","item","i","ListItem","button","ListItemIcon","ListItemText","List","component","className","list","App","state","user","Date","getDate","handleChange","event","setState","target","value","handlePrevClick","prevstate","handleNextClick","this","userItems","u","MenuItem","myrng","seedrandom","shuffledDeeds","arr","rng","shuffled","length","j","Math","floor","shuffleArray","startIndex","selection","month","getMonth","root","AppBar","position","Toolbar","Typography","variant","color","flex","Paper","square","elevation","Grid","container","spacing","xs","form","FormControl","formControl","InputLabel","htmlFor","Select","displayEmpty","onChange","inputProps","name","id","Button","onClick","withStyles","flexGrow","padding","margin","display","flexWrap","minWidth","selectEmpty","marginTop","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b1784760.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\n// A theme with custom primary and secondary color.\r\n// It's optional.\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true,\r\n  },\r\n  palette: {\r\n    primary: {\r\n      light: \"#99d066\",\r\n      main: \"#689f38\",\r\n      dark: \"#387002\",\r\n      contrastText: '#000'\r\n    },\r\n    secondary: {\r\n      light: \"#819ca9\",\r\n      main: \"#546e7a\",\r\n      dark: \"#29434e\",\r\n      contrastText: '#fff'\r\n    },\r\n  },\r\n});\r\n\r\nfunction withRoot(Component) {\r\n  function WithRoot(props) {\r\n    // MuiThemeProvider makes the theme available down the React tree\r\n    // thanks to React context.\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\r\n        <CssBaseline />\r\n        <Component {...props} />\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n\r\n  return WithRoot;\r\n}\r\n\r\nexport default withRoot;\r\n","export const users = [\r\n  \"David\",\r\n  \"Tamara\",\r\n  \"Wendy\",\r\n  \"Clara N\",\r\n  \"Majd\",\r\n  \"Reinhard\",\r\n  \"Vicktoria\",\r\n  \"Lydia\",\r\n  \"Clara F\",\r\n  \"Paul\",\r\n  \"Pauline\",\r\n  \"Bernhard\",\r\n  \"Emma\",\r\n  \"Kathrin\",\r\n  \"Linda\",\r\n  \"Sofia\",\r\n  \"Ulrike\",\r\n  \"Corelie\",\r\n  \"Julian\",\r\n  \"Nina\",\r\n  \"Nominjin\",\r\n].sort();\r\n","export const goodDeeds = [\r\n  \"Informiere dich über den Fairteiler in Baden und oder generell über die Möglichkeiten des Foodsharings\",\r\n  \"Mach heute jemandem ein ehrlich gemeintes Kompliment! Oder zwei. Oder drei\",\r\n  \"Koche oder backe heute etwas für jemanden\",\r\n  \"Lächeln. Kostet nichts. Sorgt bei dir und anderen für gute Laune. Also lächel heute was das Zeug hält!\",\r\n  \"Schreibe 3 Dinge auf, für die du dankbar bist. Das schafft ein positives Gefühl und lenkt die Aufmerksamkeit auf die schönen Dinge.\",\r\n  \"Hebe heute einfach mal ein Stück Müll auf, das nicht dir gehört. An sauberen Straßen haben alle Freude!\",\r\n  \"Unterstütze jemanden aus deiner Familie, der gerade viel zu tun hat. Einfach mal so!\",\r\n  \"Poste etwas Nettes über 3 Personen oder sende 3 FreundInnen eine Nachricht und sag ihnen, warum du sie magst und was du an ihnen schätzt.\",\r\n  \"Biete(älteren) NachbarInnen deine Hilfe an, beispielweise, indem du im Stiegenhaus einen Zettel aufhängst auf dem du deine Unterstützung anbietest(zb beim Einkaufen)\",\r\n  \"Kauf dir eine plastikfreie Trinkflasche. So musst du in Zukunft nicht mehr auf Einwegflaschen zurückgreifen und du vermeidest viel Plastikmüll!\",\r\n  \"Wusstest du dass es bereits einige Unternehmen gibt die gebrauchte elektronische Geräte generalüberholen und dann wieder verkaufen? Informiere dich über solche Unternehmen - zb. Auf Refurbed.at\",\r\n  \"Wir alle haben alte FreundInnen, zu denen wir seit Ewigkeiten keinen Kontakt hatten. Denk heute über eine solche Freundin / einen solchen Freund nach und melde dich mal wieder bei ihm oder ihr!\",\r\n  \"Lieber schenken oder beschenken lassen? Mach jemandem ein kleines Geschenk. Einfach so.\",\r\n  \"Nimm dir die Zeit jemandem etwas zu erklären Zum Beispiel Technik, die du beherrschst, der / die andere aber nicht.\",\r\n  \"Miste deinen Kleiderschrank aus und spende die noch(guten) ausgemisteten Sachen\",\r\n  \"Informiere dich über ein Hilfsprojekt deiner Wahl und überleg was du hier beitragen könntest.\",\r\n  \"Mach dir Gedanken über Geschenke – Plane zb schon jetzt bewusst ein Weihnachts oder Geburtstagsgeschenk anstatt kurz vorher einfach irgendwas zu kaufen\",\r\n  \"Höre ernsthaft zu wenn dir jemand etwas erzählen will\",\r\n  \"Bedanke dich für etwas über dass du dich freust\",\r\n  \"Beseitige Unordnung die du siehst – Auch wenn du damit gar nichts zu tun hast.\",\r\n  \"Teile etwas mit jemandem\",\r\n  \"Gewöhne dir etwas ab, das andere stört\",\r\n  \"Überrasche jemanden mit etwas Schönem\",\r\n  \"Verteile schöne Nachrichten an öffentlichen Orten – Schreibe dir ein paar liebe Botschaften auf Post Its und hinterlasse sie an Orten, an denen sie andere Menschen glücklich machen können, wenn sie sie lesen.\",\r\n  \"Bringe jemanden zum Lächeln\",\r\n  \"Verschenke etwas das du selbst gemacht hast - einfach so\",\r\n  \"Spare heute Ressourcen – Wasser, Plastik, Papier... alles was nicht verbraucht oder weg geworfen wird, ist ein Erfolg!\",\r\n  \"Plane eine Schnitzeljagd oder etwas ähnliches für deine FreundInnen\",\r\n  \"Hinterlasse einem Freund oder einer Freundin eine süße kleine Nachricht, an einem Ort, wo man sie nicht erwartet!\",\r\n  \"Bedanke dich bei deinen Eltern\",\r\n  \"Staubsaug mal die Wohnung / das Haus\",\r\n  \"Sei freundlich zu jemanden, auch wenn du ihn oder sie nicht besonders gern magst\",\r\n  \"Mach für deine Freunde eine Playlist mit all euren Lieblingssongs\",\r\n  \"Schenke einem Freund / einer Freundin ein offenes Ohr bei Problemen\",\r\n  \"Achte einen Tag bewußt darauf dich nicht zu beschweren. Das stimmt dich selbst positiver und auch deine Mitmenschen.\",\r\n  \"Versuche heute möglichst wenig zu schimpfen.\",\r\n  \"Sage einer Lehrerin oder einem Lehrer etwas Nettes.\",\r\n  \"Versuche jemanden zum Lachen zu bringen.\",\r\n  \"Versuche, einen Streit zu schlichten.\",\r\n  \"Schreibe unbemerkt eine nette Botschaft für ein Familienmitglied und lege sie aufs Bett.\",\r\n  \"Iss heute kein Fleisch\",\r\n  \"Wasche heute Geschirr ab\",\r\n  \"Schreibe einen Brief an jemanden\",\r\n  \"Schicke jemanden eine hübsche Postkarte\",\r\n  \"Suche ein schönes Foto von dir mit FreundInnen und schicke es ihnen\",\r\n  \"Räum deinen Bereich im Badezimmer auf\",\r\n  \"Verschenke etwas das du nicht mehr brauchst\",\r\n  \"Vergib jemanden auf den du böse bist\",\r\n  \"Rufe jemanden an / schreibe jemanden und frage ob du etwas für die Person tun kannst\",\r\n  \"Gib jemanden Nachhilfe / hilf bei Schulaufgaben\",\r\n  \"Räum etwas weg das schon lange herum steht\",\r\n  \"Sortiere den Kühlschrank und überleg was du mit den Lebensmitteln machen könntest die bald ablaufen\",\r\n  \"Versuche heute möglichst ohne Plastik auszukommen\",\r\n  \"Upcycle etwas\",\r\n  \"Überleg dir heute zweimal wozu du nein sagst! Vielleicht ist doch etwas dabei das du ausprobieren willst.\",\r\n  \"Gieße die Pflanzen oder füttere heute die Haustiere\",\r\n  \"Räum dein Zimmer auf\",\r\n  \"Achte heute bewusst darauf elektronische Geräte abzuschalten wenn du sie gerade nicht brauchst\",\r\n  \"Bring heute den Müll raus\",\r\n  \"Achte heute besonders darauf das Licht auszuschalten sobald du dich nicht im Raum aufhältst\"\r\n];\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport seedrandom from 'seedrandom'\r\n\r\n// material-ui\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport withRoot from './withRoot';\r\nimport { users } from './users';\r\nimport { goodDeeds } from './GoodDeeds';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  flex: {\r\n    flex: 1,\r\n  },\r\n  main: {\r\n    padding: theme.spacing(2),\r\n    margin: theme.spacing(1),\r\n  },\r\n  form: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  }\r\n});\r\n\r\nconst Months = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September',\r\n  'Oktober', 'November', 'Dezember'];\r\n\r\nconst Checklist = ({ items, day, classes }) => {\r\n  const listItems = items.map((item, i) => <ListItem key={i} button>\r\n    <ListItemIcon>\r\n      <CheckCircleIcon />\r\n    </ListItemIcon>\r\n    <ListItemText primary={item} />\r\n  </ListItem>\r\n  );\r\n  return <List component=\"nav\" className={classes.list}>\r\n    {listItems}\r\n  </List>\r\n}\r\n\r\nfunction shuffleArray(arr, rng) {\r\n  let shuffled = arr;\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(rng() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n}\r\n\r\nclass App extends Component {\r\n  state = {\r\n    user: \"\",\r\n    day: new Date().getDate()\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ user: event.target.value });\r\n  };\r\n\r\n  handlePrevClick = event => {\r\n    this.setState(prevstate => ({ day: prevstate.day - 1 }));\r\n  };\r\n\r\n  handleNextClick = event => {\r\n    this.setState(prevstate => ({ day: prevstate.day + 1 }));\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { user, day } = this.state;\r\n    const userItems = users.map(\r\n      (u, i) => <MenuItem key={i} value={u}>{u}</MenuItem>\r\n    );\r\n    const myrng = new seedrandom(user);\r\n    let shuffledDeeds = [...goodDeeds];\r\n    shuffleArray(shuffledDeeds, myrng);\r\n    const startIndex = ((day - 1) * 3) % shuffledDeeds.length;\r\n    const selection = [\r\n      shuffledDeeds[startIndex],\r\n      shuffledDeeds[startIndex + 1],\r\n      shuffledDeeds[startIndex + 2]];\r\n\r\n    const month = Months[new Date().getMonth()];\r\n\r\n    return <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n            Hydro Advent Challenges\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Paper square elevation={4} className={classes.main}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <form className={classes.form}>\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"user\">Benutzer</InputLabel>\r\n                <Select\r\n                  value={user}\r\n                  displayEmpty\r\n                  onChange={this.handleChange}\r\n                  inputProps={{\r\n                    name: 'currentUser',\r\n                    id: 'user',\r\n                  }}\r\n                >\r\n                  {userItems}\r\n                </Select>\r\n              </FormControl>\r\n            </form>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {user ?\r\n              <div>\r\n                <Typography variant=\"body1\" color=\"inherit\" className={classes.flex}>\r\n                  Versuche diese gute Taten zu erfüllen.\r\n                  <br />\r\n                  Deine Aufgaben vom {day}. {month}\r\n                </Typography>\r\n                <Checklist items={selection} classes={classes} />\r\n                {day > 1 ?\r\n                  <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.handlePrevClick}>\r\n                    {day - 1}. {month}\r\n                  </Button>\r\n                  : \"\"}\r\n                {day < new Date().getDate() ?\r\n                  <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.handleNextClick}>\r\n                    {day + 1}. {month}\r\n                  </Button>\r\n                  : \"\"}\r\n              </div>\r\n              : <Typography variant=\"body1\" color=\"inherit\" className={classes.flex}>\r\n                Wähle deinen Namen\r\n              </Typography>\r\n            }\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div >\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withRoot(withStyles(styles)(App));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}